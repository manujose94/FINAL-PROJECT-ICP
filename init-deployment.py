#!/usr/bin/env python3
import boto3
import os
import json
import studentSettings

class setupDeployment:
    def __init__(self):
        self.alucloud31=studentSettings.SettingsAlucoud31()
        self.lambdaManagerParent=studentSettings.lambdaManager(self.alucloud31,self.alucloud31.configParent)
        #Child is invoked when Parent putObject type .html tu Bucket S3
        self.lambdaManagerChild=studentSettings.lambdaManager(self.alucloud31,self.alucloud31.configChild)
        #Node Child is invoked by parent when he finish the task
        self.lambdaManagerNodeChild=studentSettings.lambdaManager(self.alucloud31,self.alucloud31.configChildNode)
        
    def init_setup(self):    
        self.check_bucket()
        self.setup()

    def check_bucket(self):
        #S3
        s3 = self.alucloud31.mysession.client('s3')
        s3resource = self.alucloud31.mysession.resource('s3') 
        bucket = s3resource.Bucket(self.alucloud31.Bucket)
        #  Check if folder username(id) exist
        check_folder_resource=False
        for object in bucket.objects.filter(Prefix="31/", Delimiter="/"):
            if(object.key == '{}/'.format(self.alucloud31.id)):
                check_folder_resource=True
                break
        if(check_folder_resource):
            print("[SUCCES] FOLDER ({}/) on BUCKET ({})".format(self.alucloud31.id,self.alucloud31.Bucket))
        else:
            print("[INFO] NOT FOLDER ({}/) on BUCKET ({})  -> [ADD]".format(self.alucloud31.id,self.alucloud31.Bucket))
            s3.put_object(Bucket=self.alucloud31.Bucket, Key=(self.alucloud31.id+'/'))
    
    def get_logs(self, hours=24):
        print("[1] Events generated by ({}) over the past {} hours".format(self.lambdaManagerParent.nameFunction,hours))
        print(json.dumps(self.lambdaManagerParent.get_logs(hours), indent=4, sort_keys=True))
        print("[2] Events generated by ({}) over the past {} hours".format(self.lambdaManagerChild.nameFunction,hours))
        print(json.dumps(self.lambdaManagerChild.get_logs(hours), indent=4, sort_keys=True))
        print("[3] Events generated by ({}) over the past {} hours".format(self.lambdaManagerNodeChild.nameFunction,hours))
        print(json.dumps(self.lambdaManagerNodeChild.get_logs(hours), indent=4, sort_keys=True))

    def setup(self):
        # FUNCTION LAMBDA
        if(self.lambdaManagerParent.check_already_exist_function()):
            print("[SUCCES] FUNCTION LAMBDA({}) exist".format(self.lambdaManagerParent.nameFunction))
        else:
            print("[INFO] FUNCTION LAMBDA({}) not exist".format(self.lambdaManagerParent.nameFunction)) 
            self.lambdaManagerParent.create_function()   
        # ADD TRIGGER EVENT
        if(self.lambdaManagerParent.check_already_exist_trigger(self.alucloud31.Bucket)):
            print("[SUCCES] TRIGGER ON BUCKET({}) exist".format(self.alucloud31.Bucket))
            print("[INFO] CHECK OUR TRIGGER ON BUCKET({}) exist".format(self.alucloud31.BucketOut))
            if(self.lambdaManagerParent.check_exist_my_trigger()):
                print("[SUCCES] TRIGGER ON BUCKET({}) exist".format(self.alucloud31.Bucket))
            else:
                print("[INFO] OUR TRIGGER ON BUCKET({}) not exist -> [ADD]".format(self.alucloud31.BucketOut))
                self.lambdaManagerParent.add_trigger()
        else:
            print("[INFO] TRIGGER ON BUCKET({}) not exist -> [ADD]".format(self.alucloud31.Bucket))  
            self.lambdaManagerParent.add_trigger()

        # CHILD FUNCTION LAMBDA
        if(self.lambdaManagerChild.check_already_exist_function()):
            print("[SUCCES] FUNCTION LAMBDA({}) exist".format(self.lambdaManagerChild.nameFunction))
        else:
            print("[INFO] FUNCTION LAMBDA({}) not exist  -> [ADD]".format(self.lambdaManagerChild.nameFunction)) 
            self.lambdaManagerChild.create_function()

        # ADD TRIGGER EVENT
        if(self.lambdaManagerChild.check_already_exist_trigger(self.alucloud31.BucketOut)):
            print("[INFO] TRIGGER ON BUCKET({}) exist".format(self.alucloud31.BucketOut))
            print("[INFO] CHECK OUR TRIGGER ON BUCKET({}) exist".format(self.alucloud31.BucketOut))
            if(self.lambdaManagerChild.check_exist_my_trigger()):
                print("[SUCCES] TRIGGER ON BUCKET({}) exist".format(self.alucloud31.Bucket))
            else:
                print("[INFO] OUR TRIGGER ON BUCKET({}) not exist  -> [ADD]".format(self.alucloud31.BucketOut))
                self.lambdaManagerChild.add_trigger()
        else:
            print("[INFO] TRIGGER ON BUCKET({}) not exist  -> [ADD]".format(self.alucloud31.BucketOut))  
            self.lambdaManagerChild.add_trigger()

        # NODE CHIELD FUNCTION LAMBDA
        if(self.lambdaManagerNodeChild.check_already_exist_function()):
            print("[SUCCES] FUNCTION LAMBDA({}) exist".format(self.lambdaManagerNodeChild.nameFunction))
        else:
            print("[INFO] FUNCTION LAMBDA({}) not exist  -> [ADD]".format(self.lambdaManagerNodeChild.nameFunction)) 
            self.lambdaManagerNodeChild.create_function()  #Create Child Function
            print("[INFO] ADD POLICY LAMBDA({}) for invoke other functions  -> [ADD]".format(self.lambdaManagerParent.nameFunction))
            # ALLOW the ParentFunction to call the ChilNodedFunction
            self.lambdaManagerNodeChild.add_policy_invoke_function(self.alucloud31.configParent['name'],self.alucloud31.configChildNode['name'])

def main():
    import argparse
    mySetup=setupDeployment()
    parser = argparse.ArgumentParser()
    parser.add_argument("-i","--Init", help="Launch the developed setup",action='store_true')
    parser.add_argument("-l","--Logs", help="Display the logs of each lambda function deployed.",action='store_true')
    args = parser.parse_args()
    if args.Init:
       mySetup.init_setup() 
    elif args.Logs:
        mySetup.get_logs()

if __name__ == '__main__':
    main()
   
    